/* eslint-disable @typescript-eslint/no-var-requires */
// convert-alias-plugin
// 已使用tsc-alias进行替代
const path = require('path');
const fs = require('fs');

// 直接require webpack.config.js 的时候只会得到一个空字符串，所以只能把别名提取出来
const alias = require('../config/alias.js');

// 别名->绝对路径映射 -- 这处只针对声明文件进行转化，故映射到dist下的types文件夹即可, 改文件夹取tsconfig中的declarationDir
const aliasMap = new Map();
Object.keys(alias.alias).forEach((item) => {
  fs.readFile('./tsconfig.json', 'utf8', (err, data) => {
    if (err) {
      throw new Error('ConvertAliasPlugin: Failed to read tsconfig file');
    }
    const regex = /"declarationDir":\s*"([^"]+)"/;
    const match = data.match(regex);
    if (match?.[1]) {
      const typePath = match?.[1];
      let absPath = path.resolve(
        __dirname,
        `.${typePath}`,
        `.${item.substring(1)}`,
      );
      // 将 自动生成的\\ 转换成能识别的 /
      const regex = new RegExp('\\\\', 'g');
      absPath = absPath.replace(regex, '/');
      aliasMap.set(item, absPath);
    }
  });
});

class ConvertAliasPlugin {
  constructor(params) {
    this.options = params?.options;
  }

  apply(compiler) {
    const extension = 'd.ts';
    const excludeList = ['config', 'plugin'];
    compiler.hooks.emit.tapAsync(
      'ConvertAliasPlugin',
      (compilation, callback) => {
        // 通过过滤只保留需要处理的文件
        const lenExtension = extension.length;
        const assetPaths = Object.keys(compilation.assets).filter((path) => {
          const nowExtension = path.substring(path.length - lenExtension);
          return nowExtension === extension;
        });
        assetPaths.forEach((assetPath) => {
          const nowRootDir = assetPath.split('/')[1];
          if (!excludeList.includes(nowRootDir)) {
            // 取到声明文件的内容,具体为src的源代码生成的声明文件
            const asset = compilation.assets[assetPath];
            // 遍历 别名->绝对路径映射
            let source = `/*Generated by the plugin ConvertAliasPlugin*/\n${asset.source()}`;
            aliasMap.forEach((value, key) => {
              // 进行别名替换
              const regex = new RegExp(key, 'g');
              source = source.replace(regex, value);
            });
            const assetPathNew = assetPath.replace('src/', '');
            // 覆盖资源
            compilation.assets[assetPathNew] = {
              // 资源内容
              source() {
                return source;
              },
              // 资源大小
              size() {
                return source.length;
              },
            };
          }
          // 删除原始声明文件
          Reflect.deleteProperty(compilation.assets, assetPath);
        });
        callback();
      },
    );
  }
}

module.exports = ConvertAliasPlugin;
